function is_private_ip() {
  return net ~ [
    fc00::/7+,
    fe80::/10+
  ];
}

function is_public_ip() {
  return !is_private_ip();
}

function ffnw_is_ours() {
  return net ~ [ {{ site.ffnw.network.ipv6 }}+ ];
}

table 'ffnw_{{ site.code }}';

# Import all routes on interface br-{{ site.code }}
protocol direct {
  table 'ffnw_{{ site.code }}';
  interface "br-{{ site.code }}";
  import where ffnw_is_ours();
};

protocol pipe {
  table 'ffnw_{{ site.code }}';
  peer table ffnw_kernel;
  export where ffnw_is_ours();
  import none;
};

protocol pipe {
  table 'ffnw_{{ site.code }}';
  peer table 'mesh_{{ site.code }}';
  export where ffnw_is_ours();
  import none;
};

template bgp bgp_ffnw {
  table ffnw_kernel;
  local as asn;
  # accept all routes
  import where net ~ [ ::/0+ ];
  # export only routes from our subnet
  export where ffnw_is_ours() && source != RTS_BGP;
  direct;
};

# load ffnw peering config
include "/etc/bird/bird6.peers.d/ffnw.conf";
